#![feature(prelude_import)]
#[prelude_import]
use std::prelude::rust_2024::*;
#[macro_use]
extern crate std;
use smol::{
    io::{AsyncBufReadExt, AsyncWriteExt, BufReader},
    net::{TcpListener, TcpStream},
    stream::StreamExt,
};
use smol_macros::main;
fn main() {
    ::smol_macros::__private::block_on(async {
        {
            let listener = TcpListener::bind("127.0.0.1:9999").await.unwrap();
            loop {
                let (stream, _) = listener.accept().await.unwrap();
                handle_connection(stream).await;
            }
        }
    })
}
async fn handle_connection(mut stream: TcpStream) {
    let buf_reader = BufReader::new(&mut stream);
    let mut req = ::alloc::vec::Vec::new();
    let mut lines = buf_reader.lines();
    while let Some(line) = lines.next().await {
        let line = line.unwrap();
        if line.is_empty() {
            break;
        }
        req.push(line);
    }
    let res = ::alloc::__export::must_use({
        let res = ::alloc::fmt::format(
            format_args!("HTTP/1.1 200 OK\r\n\r\n{0:#?}", req),
        );
        res
    });
    stream.write_all(res.as_bytes()).await.unwrap();
    stream.flush().await.unwrap();
}
